{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled5.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyOzgHkL2xJHd43lP9ym6PFE",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AlanFernandoS/IntroduccionIA/blob/master/IntroduccionALaInteligenciaArtificial\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ypsTiPFSJONk",
        "outputId": "d211c733-bd2a-42c9-b30d-6a0c3010fa38"
      },
      "source": [
        "pip install pandas"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.6/dist-packages (1.1.5)\n",
            "Requirement already satisfied: numpy>=1.15.4 in /usr/local/lib/python3.6/dist-packages (from pandas) (1.19.5)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas) (2018.9)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.6/dist-packages (from pandas) (2.8.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil>=2.7.3->pandas) (1.15.0)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fbVTFidFJlGM",
        "outputId": "905905c1-c9bb-413b-eb31-c5ad8d175555"
      },
      "source": [
        "pip install numpy"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (1.19.5)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C1gPKJNxJpqy"
      },
      "source": [
        "import pandas as pd\r\n",
        "import numpy as np\r\n",
        "import matplotlib.pyplot as plt\r\n",
        "import seaborn as sns\r\n",
        "import tensorflow as tf"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1TrEFL6GJ2jn"
      },
      "source": [
        "casas=pd.read_csv('USA_Housing.csv')"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 771
        },
        "id": "CRlrQeBRKAX3",
        "outputId": "8ea80f10-111f-4c09-e881-2f733dcb3e8b"
      },
      "source": [
        "casas"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Avg. Area Income</th>\n",
              "      <th>Avg. Area House Age</th>\n",
              "      <th>Avg. Area Number of Rooms</th>\n",
              "      <th>Avg. Area Number of Bedrooms</th>\n",
              "      <th>Area Population</th>\n",
              "      <th>Price</th>\n",
              "      <th>Address</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>79545.458574</td>\n",
              "      <td>5.682861</td>\n",
              "      <td>7.009188</td>\n",
              "      <td>4.09</td>\n",
              "      <td>23086.800503</td>\n",
              "      <td>1.059034e+06</td>\n",
              "      <td>208 Michael Ferry Apt. 674\\nLaurabury, NE 3701...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>79248.642455</td>\n",
              "      <td>6.002900</td>\n",
              "      <td>6.730821</td>\n",
              "      <td>3.09</td>\n",
              "      <td>40173.072174</td>\n",
              "      <td>1.505891e+06</td>\n",
              "      <td>188 Johnson Views Suite 079\\nLake Kathleen, CA...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>61287.067179</td>\n",
              "      <td>5.865890</td>\n",
              "      <td>8.512727</td>\n",
              "      <td>5.13</td>\n",
              "      <td>36882.159400</td>\n",
              "      <td>1.058988e+06</td>\n",
              "      <td>9127 Elizabeth Stravenue\\nDanieltown, WI 06482...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>63345.240046</td>\n",
              "      <td>7.188236</td>\n",
              "      <td>5.586729</td>\n",
              "      <td>3.26</td>\n",
              "      <td>34310.242831</td>\n",
              "      <td>1.260617e+06</td>\n",
              "      <td>USS Barnett\\nFPO AP 44820</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>59982.197226</td>\n",
              "      <td>5.040555</td>\n",
              "      <td>7.839388</td>\n",
              "      <td>4.23</td>\n",
              "      <td>26354.109472</td>\n",
              "      <td>6.309435e+05</td>\n",
              "      <td>USNS Raymond\\nFPO AE 09386</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4995</th>\n",
              "      <td>60567.944140</td>\n",
              "      <td>7.830362</td>\n",
              "      <td>6.137356</td>\n",
              "      <td>3.46</td>\n",
              "      <td>22837.361035</td>\n",
              "      <td>1.060194e+06</td>\n",
              "      <td>USNS Williams\\nFPO AP 30153-7653</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4996</th>\n",
              "      <td>78491.275435</td>\n",
              "      <td>6.999135</td>\n",
              "      <td>6.576763</td>\n",
              "      <td>4.02</td>\n",
              "      <td>25616.115489</td>\n",
              "      <td>1.482618e+06</td>\n",
              "      <td>PSC 9258, Box 8489\\nAPO AA 42991-3352</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4997</th>\n",
              "      <td>63390.686886</td>\n",
              "      <td>7.250591</td>\n",
              "      <td>4.805081</td>\n",
              "      <td>2.13</td>\n",
              "      <td>33266.145490</td>\n",
              "      <td>1.030730e+06</td>\n",
              "      <td>4215 Tracy Garden Suite 076\\nJoshualand, VA 01...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4998</th>\n",
              "      <td>68001.331235</td>\n",
              "      <td>5.534388</td>\n",
              "      <td>7.130144</td>\n",
              "      <td>5.44</td>\n",
              "      <td>42625.620156</td>\n",
              "      <td>1.198657e+06</td>\n",
              "      <td>USS Wallace\\nFPO AE 73316</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4999</th>\n",
              "      <td>65510.581804</td>\n",
              "      <td>5.992305</td>\n",
              "      <td>6.792336</td>\n",
              "      <td>4.07</td>\n",
              "      <td>46501.283803</td>\n",
              "      <td>1.298950e+06</td>\n",
              "      <td>37778 George Ridges Apt. 509\\nEast Holly, NV 2...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5000 rows Ã— 7 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      Avg. Area Income  ...                                            Address\n",
              "0         79545.458574  ...  208 Michael Ferry Apt. 674\\nLaurabury, NE 3701...\n",
              "1         79248.642455  ...  188 Johnson Views Suite 079\\nLake Kathleen, CA...\n",
              "2         61287.067179  ...  9127 Elizabeth Stravenue\\nDanieltown, WI 06482...\n",
              "3         63345.240046  ...                          USS Barnett\\nFPO AP 44820\n",
              "4         59982.197226  ...                         USNS Raymond\\nFPO AE 09386\n",
              "...                ...  ...                                                ...\n",
              "4995      60567.944140  ...                   USNS Williams\\nFPO AP 30153-7653\n",
              "4996      78491.275435  ...              PSC 9258, Box 8489\\nAPO AA 42991-3352\n",
              "4997      63390.686886  ...  4215 Tracy Garden Suite 076\\nJoshualand, VA 01...\n",
              "4998      68001.331235  ...                          USS Wallace\\nFPO AE 73316\n",
              "4999      65510.581804  ...  37778 George Ridges Apt. 509\\nEast Holly, NV 2...\n",
              "\n",
              "[5000 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wxoe7B61KEDX",
        "outputId": "7719466f-585c-4966-f1a8-8ef3d5a37372"
      },
      "source": [
        "casas.info()"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 5000 entries, 0 to 4999\n",
            "Data columns (total 7 columns):\n",
            " #   Column                        Non-Null Count  Dtype  \n",
            "---  ------                        --------------  -----  \n",
            " 0   Avg. Area Income              5000 non-null   float64\n",
            " 1   Avg. Area House Age           5000 non-null   float64\n",
            " 2   Avg. Area Number of Rooms     5000 non-null   float64\n",
            " 3   Avg. Area Number of Bedrooms  5000 non-null   float64\n",
            " 4   Area Population               5000 non-null   float64\n",
            " 5   Price                         5000 non-null   float64\n",
            " 6   Address                       5000 non-null   object \n",
            "dtypes: float64(6), object(1)\n",
            "memory usage: 273.6+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "rSbJGBBXKGXX",
        "outputId": "05e1fc5e-eed4-4a27-bc9a-6927e658e5a6"
      },
      "source": [
        "casas.describe()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Avg. Area Income</th>\n",
              "      <th>Avg. Area House Age</th>\n",
              "      <th>Avg. Area Number of Rooms</th>\n",
              "      <th>Avg. Area Number of Bedrooms</th>\n",
              "      <th>Area Population</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5.000000e+03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>68583.108984</td>\n",
              "      <td>5.977222</td>\n",
              "      <td>6.987792</td>\n",
              "      <td>3.981330</td>\n",
              "      <td>36163.516039</td>\n",
              "      <td>1.232073e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>10657.991214</td>\n",
              "      <td>0.991456</td>\n",
              "      <td>1.005833</td>\n",
              "      <td>1.234137</td>\n",
              "      <td>9925.650114</td>\n",
              "      <td>3.531176e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>17796.631190</td>\n",
              "      <td>2.644304</td>\n",
              "      <td>3.236194</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>172.610686</td>\n",
              "      <td>1.593866e+04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>61480.562388</td>\n",
              "      <td>5.322283</td>\n",
              "      <td>6.299250</td>\n",
              "      <td>3.140000</td>\n",
              "      <td>29403.928702</td>\n",
              "      <td>9.975771e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>68804.286404</td>\n",
              "      <td>5.970429</td>\n",
              "      <td>7.002902</td>\n",
              "      <td>4.050000</td>\n",
              "      <td>36199.406689</td>\n",
              "      <td>1.232669e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>75783.338666</td>\n",
              "      <td>6.650808</td>\n",
              "      <td>7.665871</td>\n",
              "      <td>4.490000</td>\n",
              "      <td>42861.290769</td>\n",
              "      <td>1.471210e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>107701.748378</td>\n",
              "      <td>9.519088</td>\n",
              "      <td>10.759588</td>\n",
              "      <td>6.500000</td>\n",
              "      <td>69621.713378</td>\n",
              "      <td>2.469066e+06</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Avg. Area Income  Avg. Area House Age  ...  Area Population         Price\n",
              "count       5000.000000          5000.000000  ...      5000.000000  5.000000e+03\n",
              "mean       68583.108984             5.977222  ...     36163.516039  1.232073e+06\n",
              "std        10657.991214             0.991456  ...      9925.650114  3.531176e+05\n",
              "min        17796.631190             2.644304  ...       172.610686  1.593866e+04\n",
              "25%        61480.562388             5.322283  ...     29403.928702  9.975771e+05\n",
              "50%        68804.286404             5.970429  ...     36199.406689  1.232669e+06\n",
              "75%        75783.338666             6.650808  ...     42861.290769  1.471210e+06\n",
              "max       107701.748378             9.519088  ...     69621.713378  2.469066e+06\n",
              "\n",
              "[8 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 388
        },
        "id": "F3xzNIRPKUIh",
        "outputId": "784d87f1-219a-461b-b8ce-9ff0d8068243"
      },
      "source": [
        "sns.displot(casas['Price'])"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f211acd6748>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jqi4ip7vRPZU"
      },
      "source": [
        "Se puede realizar el estudio de correlaciÃ³n de las variables lo ideal es algo parecido al caso de abajo, donde no exista relaciÃ³n entre ellas, y tengan independencia entre las mismas"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 435
        },
        "id": "_6epPKnwKokf",
        "outputId": "8e567322-03d8-4b5b-86c7-59905f40e32e"
      },
      "source": [
        "sns.heatmap(casas.corr())"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f2109628e10>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BqurDqjxK_Oo",
        "outputId": "092c35c8-f5b8-4c86-9a13-9c0a242225a7"
      },
      "source": [
        "casas.columns"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',\n",
              "       'Avg. Area Number of Bedrooms', 'Area Population', 'Price', 'Address'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NFrDwS1tMP6m"
      },
      "source": [
        "Y=casas['Price']\r\n",
        "X=casas[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',\r\n",
        "       'Avg. Area Number of Bedrooms', 'Area Population']]\r\n"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-gyZoqNHMgq9"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\r\n",
        "x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.3,random_state=3)"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AdTmeqPeMjvA"
      },
      "source": [
        "\r\n",
        "from sklearn.linear_model import LinearRegression"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hIKOOCo3NV0t"
      },
      "source": [
        "Modelo=LinearRegression()"
      ],
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c-K-frOyNmYv",
        "outputId": "0c54dc94-7c15-46d1-8571-839db5f76b78"
      },
      "source": [
        "Modelo.fit(X=x_train,y=y_train)"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ubiQ2qcwN2NN",
        "outputId": "fdd8a03f-6c33-4283-f330-24acf00df62f"
      },
      "source": [
        "Modelo.score(x_train,y_train)"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9188688514537522"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uEvm0ZKrOAcG"
      },
      "source": [
        "from sklearn import metrics\r\n"
      ],
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1525sZFXOk8A"
      },
      "source": [
        "prediccion=Modelo.predict(x_test)"
      ],
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lqkB8GU-Or-X",
        "outputId": "20affd13-e4fa-4dc5-f989-29743738f136"
      },
      "source": [
        "prediccion"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1263899.38304113, 1497146.16237278, 1565348.70624937, ...,\n",
              "        729783.9137891 ,  999527.1024882 , 1087482.97668128])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8Ax4qJFbOs80",
        "outputId": "67e86861-0238-4526-cae7-f2fa5519ab09"
      },
      "source": [
        "len(prediccion)"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1500"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IKr0tWFSPEW8",
        "outputId": "485e2823-d0c0-4e90-9279-b187ebb77c6c"
      },
      "source": [
        "len(y_test)"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1500"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z5u5duunQ6zF"
      },
      "source": [
        "Para comprobar las relaciones existentes en los datos se puede expresar como un grÃ¡fico de dispersiÃ³n, donde se supone que deberÃ­a de regresar una linea recta, si todos los datos de entrada tienen un comportamiento similar"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 308
        },
        "id": "DicykaL2PIND",
        "outputId": "e7e8d7e7-9674-4ef7-a393-fca5c3c807e2"
      },
      "source": [
        "plt.scatter(y_test,prediccion)"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7f20d24bfe10>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 41
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 366
        },
        "id": "XKB7Nh1VQ5Ms",
        "outputId": "a87f7d29-1134-4af5-a076-6a442754b035"
      },
      "source": [
        "sns.distplot(y_test-prediccion)"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f20d24870f0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 42
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_3UGrqyARdcZ"
      },
      "source": [
        "Sin embargo, una mÃ©trica usada en este campo de las aplicaciones se compone del sistema denotado por:\r\n",
        "$$MAE=Mean Absolute Error$$"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vcPEi29lRMaj",
        "outputId": "b301f97f-1310-4e31-a76a-560eeb01adaf"
      },
      "source": [
        "metrics.mean_absolute_error(y_test,prediccion)"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "81088.00105343905"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ao4mtnLlR24c"
      },
      "source": [
        "Tambien se utiliza la\r\n",
        "$$MSE=MediaDeLosErroresCuadrÃ¡ticos$$"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I1QG_Vm2RvwD",
        "outputId": "ee6c55cd-99ab-4d74-fb73-68cb8d57510a"
      },
      "source": [
        "metrics.mean_squared_error(y_test,prediccion)"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10277027976.081932"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kbwdHzwlSFOD",
        "outputId": "e57b346e-7983-4c19-eb0f-07d4d931f111"
      },
      "source": [
        "np.sqrt(metrics.mean_squared_error(y_test,prediccion))"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "101375.6774383379"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dQxvmPlmSZ3C"
      },
      "source": [
        "Es demasiado alto, la verdad el intervalo de confianza con esta distrivuciÃ³n es de +- el valor de este valor"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PahyhLkgSIxj"
      },
      "source": [
        "from sklearn.linear_model import LogisticRegression"
      ],
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9d62jweqTIoK"
      },
      "source": [
        "Superviviente=pd.read_csv('train.csv')"
      ],
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wca9mlIUUOlq",
        "outputId": "a6faaf71-ae9f-4dfd-c90e-533827d5328e"
      },
      "source": [
        "Superviviente.info()"
      ],
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 891 entries, 0 to 890\n",
            "Data columns (total 12 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   PassengerId  891 non-null    int64  \n",
            " 1   Survived     891 non-null    int64  \n",
            " 2   Pclass       891 non-null    int64  \n",
            " 3   Name         891 non-null    object \n",
            " 4   Sex          891 non-null    object \n",
            " 5   Age          714 non-null    float64\n",
            " 6   SibSp        891 non-null    int64  \n",
            " 7   Parch        891 non-null    int64  \n",
            " 8   Ticket       891 non-null    object \n",
            " 9   Fare         891 non-null    float64\n",
            " 10  Cabin        204 non-null    object \n",
            " 11  Embarked     889 non-null    object \n",
            "dtypes: float64(2), int64(5), object(5)\n",
            "memory usage: 83.7+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        },
        "id": "TS3Bo-ZSUQZE",
        "outputId": "58bd72d6-ddb2-4bfd-bff9-ac5d67446b30"
      },
      "source": [
        "Superviviente.describe()"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>714.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.383838</td>\n",
              "      <td>2.308642</td>\n",
              "      <td>29.699118</td>\n",
              "      <td>0.523008</td>\n",
              "      <td>0.381594</td>\n",
              "      <td>32.204208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>257.353842</td>\n",
              "      <td>0.486592</td>\n",
              "      <td>0.836071</td>\n",
              "      <td>14.526497</td>\n",
              "      <td>1.102743</td>\n",
              "      <td>0.806057</td>\n",
              "      <td>49.693429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.420000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>223.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>20.125000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>7.910400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>28.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>14.454200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>668.500000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>31.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>512.329200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       PassengerId    Survived      Pclass  ...       SibSp       Parch        Fare\n",
              "count   891.000000  891.000000  891.000000  ...  891.000000  891.000000  891.000000\n",
              "mean    446.000000    0.383838    2.308642  ...    0.523008    0.381594   32.204208\n",
              "std     257.353842    0.486592    0.836071  ...    1.102743    0.806057   49.693429\n",
              "min       1.000000    0.000000    1.000000  ...    0.000000    0.000000    0.000000\n",
              "25%     223.500000    0.000000    2.000000  ...    0.000000    0.000000    7.910400\n",
              "50%     446.000000    0.000000    3.000000  ...    0.000000    0.000000   14.454200\n",
              "75%     668.500000    1.000000    3.000000  ...    1.000000    0.000000   31.000000\n",
              "max     891.000000    1.000000    3.000000  ...    8.000000    6.000000  512.329200\n",
              "\n",
              "[8 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RtWvM-moUST-",
        "outputId": "3b7cf41a-95d4-4592-e099-400b2765fc8a"
      },
      "source": [
        "Superviviente.columns"
      ],
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n",
              "       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 339
        },
        "id": "vy989xTDUUOH",
        "outputId": "5a310deb-9f83-4f96-deda-f314ab597940"
      },
      "source": [
        "sns.heatmap(Superviviente.corr())"
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f20d25a1128>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 55
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yRsZlMpYVRnh"
      },
      "source": [
        "Fase I, limpiar los datos, pueden tener valores irrergulares, que hacen invalida la estructura de los datos, esto es fÃ¡cilmente generable con:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 965
        },
        "id": "szi8gHrEUaiy",
        "outputId": "7aafb205-f691-45bd-8e6b-c601f64b7109"
      },
      "source": [
        "Superviviente.dropna()"
      ],
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>McCarthy, Mr. Timothy J</td>\n",
              "      <td>male</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>17463</td>\n",
              "      <td>51.8625</td>\n",
              "      <td>E46</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>11</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Sandstrom, Miss. Marguerite Rut</td>\n",
              "      <td>female</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>PP 9549</td>\n",
              "      <td>16.7000</td>\n",
              "      <td>G6</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Bonnell, Miss. Elizabeth</td>\n",
              "      <td>female</td>\n",
              "      <td>58.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>113783</td>\n",
              "      <td>26.5500</td>\n",
              "      <td>C103</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>871</th>\n",
              "      <td>872</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Beckwith, Mrs. Richard Leonard (Sallie Monypeny)</td>\n",
              "      <td>female</td>\n",
              "      <td>47.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>11751</td>\n",
              "      <td>52.5542</td>\n",
              "      <td>D35</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>872</th>\n",
              "      <td>873</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Carlsson, Mr. Frans Olof</td>\n",
              "      <td>male</td>\n",
              "      <td>33.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>695</td>\n",
              "      <td>5.0000</td>\n",
              "      <td>B51 B53 B55</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>879</th>\n",
              "      <td>880</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)</td>\n",
              "      <td>female</td>\n",
              "      <td>56.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>11767</td>\n",
              "      <td>83.1583</td>\n",
              "      <td>C50</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>888</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Graham, Miss. Margaret Edith</td>\n",
              "      <td>female</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>112053</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>B42</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>890</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Behr, Mr. Karl Howell</td>\n",
              "      <td>male</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>111369</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>C148</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>183 rows Ã— 12 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     PassengerId  Survived  Pclass  ...     Fare        Cabin  Embarked\n",
              "1              2         1       1  ...  71.2833          C85         C\n",
              "3              4         1       1  ...  53.1000         C123         S\n",
              "6              7         0       1  ...  51.8625          E46         S\n",
              "10            11         1       3  ...  16.7000           G6         S\n",
              "11            12         1       1  ...  26.5500         C103         S\n",
              "..           ...       ...     ...  ...      ...          ...       ...\n",
              "871          872         1       1  ...  52.5542          D35         S\n",
              "872          873         0       1  ...   5.0000  B51 B53 B55         S\n",
              "879          880         1       1  ...  83.1583          C50         C\n",
              "887          888         1       1  ...  30.0000          B42         S\n",
              "889          890         1       1  ...  30.0000         C148         C\n",
              "\n",
              "[183 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 948
        },
        "id": "OEFYeAIbVHhc",
        "outputId": "800c5fb7-c3ce-49ec-cb95-a258199b083a"
      },
      "source": [
        "Superviviente"
      ],
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>887</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>Montvila, Rev. Juozas</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>211536</td>\n",
              "      <td>13.0000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>888</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Graham, Miss. Margaret Edith</td>\n",
              "      <td>female</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>112053</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>B42</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>889</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
              "      <td>female</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>W./C. 6607</td>\n",
              "      <td>23.4500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>890</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Behr, Mr. Karl Howell</td>\n",
              "      <td>male</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>111369</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>C148</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>891</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Dooley, Mr. Patrick</td>\n",
              "      <td>male</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>370376</td>\n",
              "      <td>7.7500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>891 rows Ã— 12 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n",
              "0              1         0       3  ...   7.2500   NaN         S\n",
              "1              2         1       1  ...  71.2833   C85         C\n",
              "2              3         1       3  ...   7.9250   NaN         S\n",
              "3              4         1       1  ...  53.1000  C123         S\n",
              "4              5         0       3  ...   8.0500   NaN         S\n",
              "..           ...       ...     ...  ...      ...   ...       ...\n",
              "886          887         0       2  ...  13.0000   NaN         S\n",
              "887          888         1       1  ...  30.0000   B42         S\n",
              "888          889         0       3  ...  23.4500   NaN         S\n",
              "889          890         1       1  ...  30.0000  C148         C\n",
              "890          891         0       3  ...   7.7500   NaN         Q\n",
              "\n",
              "[891 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 355
        },
        "id": "pjY0dQMJVgUZ",
        "outputId": "0d438214-50b2-4c3d-ae4f-1de6258edc65"
      },
      "source": [
        "sns.distplot(Superviviente['Age'])"
      ],
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f20d1fb09b0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 61
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lsOY1QMkV2FR",
        "outputId": "eef70c7c-a889-47e4-f760-e3b51ca0e21f"
      },
      "source": [
        "Superviviente.columns"
      ],
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n",
              "       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hDJzmzc-XfOC"
      },
      "source": [
        ""
      ],
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5OqGOkjAYlv-"
      },
      "source": [
        "Permite separar de una manera mas simple las columnas como categoricos de una manera simple:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DEgJTnjvYEW_"
      },
      "source": [
        "Sexos=pd.get_dummies(Superviviente['Sex'])"
      ],
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vdJs_ELhYOyH"
      },
      "source": [
        "Superviviente=pd.concat([Superviviente, Sexos],axis=1)"
      ],
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zGtKl1oSaBQm"
      },
      "source": [
        "Superviviente=Superviviente.dropna()"
      ],
      "execution_count": 79,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jeVG53vZYYUQ",
        "outputId": "662bb025-45ab-4821-ca17-301a6f2cc97d"
      },
      "source": [
        "Superviviente.columns"
      ],
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n",
              "       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'female', 'male'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "kJLXEb5UYgbI",
        "outputId": "97e7d867-38a4-457d-dfad-c5d04aaca051"
      },
      "source": [
        "x=Superviviente[['Pclass','Age','female','male']]\r\n",
        "y=Superviviente['Survived']\r\n",
        "x"
      ],
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Age</th>\n",
              "      <th>female</th>\n",
              "      <th>male</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>3</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>1</td>\n",
              "      <td>58.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>871</th>\n",
              "      <td>1</td>\n",
              "      <td>47.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>872</th>\n",
              "      <td>1</td>\n",
              "      <td>33.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>879</th>\n",
              "      <td>1</td>\n",
              "      <td>56.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>1</td>\n",
              "      <td>19.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>1</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>183 rows Ã— 4 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     Pclass   Age  female  male\n",
              "1         1  38.0       1     0\n",
              "3         1  35.0       1     0\n",
              "6         1  54.0       0     1\n",
              "10        3   4.0       1     0\n",
              "11        1  58.0       1     0\n",
              "..      ...   ...     ...   ...\n",
              "871       1  47.0       1     0\n",
              "872       1  33.0       0     1\n",
              "879       1  56.0       1     0\n",
              "887       1  19.0       1     0\n",
              "889       1  26.0       0     1\n",
              "\n",
              "[183 rows x 4 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LNcJdJTLZDwD"
      },
      "source": [
        "modelo2=LinearRegression()\r\n",
        "x,x_t,y,y_t=train_test_split(x,y,test_size=0.3,random_state=3)"
      ],
      "execution_count": 86,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_4pToubyZxsA",
        "outputId": "3108418a-21ea-4e5f-b0c0-62c64e94f153"
      },
      "source": [
        "modelo2.fit(x,y)"
      ],
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4-XunBRraoKD",
        "outputId": "90ad72ce-6b98-4a0e-e073-fb87c9eb9848"
      },
      "source": [
        "modelo2.score"
      ],
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method RegressorMixin.score of LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y5vkapw1aqcf"
      },
      "source": [
        "from sklearn.metrics import classification_report\r\n",
        "Pre=modelo2.predict(x_t)"
      ],
      "execution_count": 90,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6Caqt3vHa3RN"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}